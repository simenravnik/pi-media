server {
    listen 80;
    listen [::]:80;

    server_name pi.ximen.dev www.pi.ximen.dev;
    server_tokens off;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://pi.ximen.dev$request_uri;
    }
}

server {

    listen 443 default_server ssl http2;
    listen [::]:443 ssl http2;

    server_name pi.ximen.dev;

    ssl_certificate /etc/nginx/ssl/live/pi.ximen.dev/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/live/pi.ximen.dev/privkey.pem;
    
    location /qbt/ {
        proxy_pass         http://qbt:8080/;
        proxy_http_version 1.1;
        http2_push_preload on; # Enable http2 push

        proxy_set_header   Host               qbt:8080;
        proxy_set_header   X-Forwarded-Proto  $scheme;
        proxy_set_header   X-Forwarded-Host   $http_host;
        proxy_set_header   X-Forwarded-For    $remote_addr;
        proxy_set_header   X-Real-IP          $remote_addr;

        # optionally, you can adjust the POST request size limit, to allow adding a lot of torrents at once:
        #client_max_body_size 100M;

        # since v4.2.2, is possible to configure qBittorrent
        # to set the "Secure" flag for the session cookie automatically.
        # However, that option does nothing unless using qBittorrent's built-in HTTPS functionality.
        # For this use case, where qBittorrent itself is using plain HTTP
        # (and regardless of whether or not the external website uses HTTPS),
        # the flag must be set here, in the proxy configuration itself:
        proxy_cookie_path / "/; Secure";
    }
}